{"ast":null,"code":"export function getWithExpiry(key){var itemStr=localStorage.getItem(key);// if the item doesn't exist, return null\nif(!itemStr){return null;}var item=JSON.parse(itemStr);var now=new Date();// compare the expiry time of the item with the current time\nif(now.getTime()>item.expiry){// If the item is expired, delete the item from storage\n// and return null\nlocalStorage.removeItem(key);return null;}return item.value;}export function setWithExpiry(key,value,ttl){var now=new Date();// `item` is an object which contains the original value\n// as well as the time when it's supposed to expire\nvar item={value:value,expiry:now.getTime()+ttl};localStorage.setItem(key,JSON.stringify(item));}","map":{"version":3,"sources":["C:/Users/rubi/Documents/GitHub/xbt-frontend/src/helper/utils.js"],"names":["getWithExpiry","key","itemStr","localStorage","getItem","item","JSON","parse","now","Date","getTime","expiry","removeItem","value","setWithExpiry","ttl","setItem","stringify"],"mappings":"AAAA,MAAO,SAASA,CAAAA,aAAT,CAAuBC,GAAvB,CAA4B,CACjC,GAAMC,CAAAA,OAAO,CAAGC,YAAY,CAACC,OAAb,CAAqBH,GAArB,CAAhB,CACA;AACA,GAAI,CAACC,OAAL,CAAc,CACZ,MAAO,KAAP,CACD,CACD,GAAMG,CAAAA,IAAI,CAAGC,IAAI,CAACC,KAAL,CAAWL,OAAX,CAAb,CACA,GAAMM,CAAAA,GAAG,CAAG,GAAIC,CAAAA,IAAJ,EAAZ,CACA;AACA,GAAID,GAAG,CAACE,OAAJ,GAAgBL,IAAI,CAACM,MAAzB,CAAiC,CAC/B;AACA;AACAR,YAAY,CAACS,UAAb,CAAwBX,GAAxB,EACA,MAAO,KAAP,CACD,CACD,MAAOI,CAAAA,IAAI,CAACQ,KAAZ,CACD,CAED,MAAO,SAASC,CAAAA,aAAT,CAAuBb,GAAvB,CAA4BY,KAA5B,CAAmCE,GAAnC,CAAwC,CAC7C,GAAMP,CAAAA,GAAG,CAAG,GAAIC,CAAAA,IAAJ,EAAZ,CAEA;AACA;AACA,GAAMJ,CAAAA,IAAI,CAAG,CACXQ,KAAK,CAAEA,KADI,CAEXF,MAAM,CAAEH,GAAG,CAACE,OAAJ,GAAgBK,GAFb,CAAb,CAIAZ,YAAY,CAACa,OAAb,CAAqBf,GAArB,CAA0BK,IAAI,CAACW,SAAL,CAAeZ,IAAf,CAA1B,EACD","sourcesContent":["export function getWithExpiry(key) {\r\n  const itemStr = localStorage.getItem(key);\r\n  // if the item doesn't exist, return null\r\n  if (!itemStr) {\r\n    return null;\r\n  }\r\n  const item = JSON.parse(itemStr);\r\n  const now = new Date();\r\n  // compare the expiry time of the item with the current time\r\n  if (now.getTime() > item.expiry) {\r\n    // If the item is expired, delete the item from storage\r\n    // and return null\r\n    localStorage.removeItem(key);\r\n    return null;\r\n  }\r\n  return item.value;\r\n}\r\n\r\nexport function setWithExpiry(key, value, ttl) {\r\n  const now = new Date();\r\n\r\n  // `item` is an object which contains the original value\r\n  // as well as the time when it's supposed to expire\r\n  const item = {\r\n    value: value,\r\n    expiry: now.getTime() + ttl,\r\n  };\r\n  localStorage.setItem(key, JSON.stringify(item));\r\n}\r\n"]},"metadata":{},"sourceType":"module"}