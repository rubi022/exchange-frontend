{"ast":null,"code":"export function getWithExpiry(key) {\n  const itemStr = localStorage.getItem(key); // if the item doesn't exist, return null\n\n  if (!itemStr) {\n    return null;\n  }\n\n  const item = JSON.parse(itemStr);\n  const now = new Date(); // compare the expiry time of the item with the current time\n\n  if (now.getTime() > item.expiry) {\n    // If the item is expired, delete the item from storage\n    // and return null\n    localStorage.removeItem(key);\n    return null;\n  }\n\n  return item.value;\n}\nexport function setWithExpiry(key, value, ttl) {\n  const now = new Date(); // `item` is an object which contains the original value\n  // as well as the time when it's supposed to expire\n\n  const item = {\n    value: value,\n    expiry: now.getTime() + ttl\n  };\n  localStorage.setItem(key, JSON.stringify(item));\n}","map":{"version":3,"sources":["C:/Users/rubi/Documents/GitHub/xbt-frontend/src/helper/utils.js"],"names":["getWithExpiry","key","itemStr","localStorage","getItem","item","JSON","parse","now","Date","getTime","expiry","removeItem","value","setWithExpiry","ttl","setItem","stringify"],"mappings":"AAAA,OAAO,SAASA,aAAT,CAAuBC,GAAvB,EAA4B;AACjC,QAAMC,OAAO,GAAGC,YAAY,CAACC,OAAb,CAAqBH,GAArB,CAAhB,CADiC,CAEjC;;AACA,MAAI,CAACC,OAAL,EAAc;AACZ,WAAO,IAAP;AACD;;AACD,QAAMG,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWL,OAAX,CAAb;AACA,QAAMM,GAAG,GAAG,IAAIC,IAAJ,EAAZ,CAPiC,CAQjC;;AACA,MAAID,GAAG,CAACE,OAAJ,KAAgBL,IAAI,CAACM,MAAzB,EAAiC;AAC/B;AACA;AACAR,IAAAA,YAAY,CAACS,UAAb,CAAwBX,GAAxB;AACA,WAAO,IAAP;AACD;;AACD,SAAOI,IAAI,CAACQ,KAAZ;AACD;AAED,OAAO,SAASC,aAAT,CAAuBb,GAAvB,EAA4BY,KAA5B,EAAmCE,GAAnC,EAAwC;AAC7C,QAAMP,GAAG,GAAG,IAAIC,IAAJ,EAAZ,CAD6C,CAG7C;AACA;;AACA,QAAMJ,IAAI,GAAG;AACXQ,IAAAA,KAAK,EAAEA,KADI;AAEXF,IAAAA,MAAM,EAAEH,GAAG,CAACE,OAAJ,KAAgBK;AAFb,GAAb;AAIAZ,EAAAA,YAAY,CAACa,OAAb,CAAqBf,GAArB,EAA0BK,IAAI,CAACW,SAAL,CAAeZ,IAAf,CAA1B;AACD","sourcesContent":["export function getWithExpiry(key) {\r\n  const itemStr = localStorage.getItem(key);\r\n  // if the item doesn't exist, return null\r\n  if (!itemStr) {\r\n    return null;\r\n  }\r\n  const item = JSON.parse(itemStr);\r\n  const now = new Date();\r\n  // compare the expiry time of the item with the current time\r\n  if (now.getTime() > item.expiry) {\r\n    // If the item is expired, delete the item from storage\r\n    // and return null\r\n    localStorage.removeItem(key);\r\n    return null;\r\n  }\r\n  return item.value;\r\n}\r\n\r\nexport function setWithExpiry(key, value, ttl) {\r\n  const now = new Date();\r\n\r\n  // `item` is an object which contains the original value\r\n  // as well as the time when it's supposed to expire\r\n  const item = {\r\n    value: value,\r\n    expiry: now.getTime() + ttl,\r\n  };\r\n  localStorage.setItem(key, JSON.stringify(item));\r\n}\r\n"]},"metadata":{},"sourceType":"module"}